import logging
import json
import re
import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import deque
from datetime import datetime
from statistics import mean
import asyncio

API_TOKEN = '7625642691:AAFa41xZsEv2eFxqyoTZ6dTX4nfY6itgScw'
GROUP1_ID = -1002816304860
GROUP2_IDS = [-1002569933724, -1002514580090, -1002799832189, -1002554415803, -1002537566318]

TOPIC_IDS_GROUP1 = [72295, 72290]

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

phone_pattern = re.compile(
    r"(?:\+7|7|8)?[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}|\b\d{10}\b"
)
from datetime import datetime, timedelta

blocked_numbers = {} 
from datetime import datetime, timedelta
history_file = "history.json"
history = [] 
last_empty_alert = None
history[:] = history[-50:]

number_queue = deque()
user_queue = deque()
bindings = {}

QUEUE_FILE = "number_queue.json"
USER_FILE = "user_queue.json"
BINDINGS_FILE = "bindings.json"
queued_numbers_set = set()


def save_data():
    with open(QUEUE_FILE, 'w') as f:
        json.dump(list(number_queue), f)
    with open(USER_FILE, 'w') as f:
        json.dump(list(user_queue), f)
    with open(BINDINGS_FILE, 'w') as f:
        json.dump(bindings, f)
def load_history():
    global history
    if os.path.exists(history_file):
        with open(history_file, "r") as f:
            history = json.load(f)

def save_history():
    with open(history_file, "w") as f:
        json.dump(history, f)


def load_data():
    global number_queue, user_queue, bindings
    if os.path.exists(QUEUE_FILE):
        with open(QUEUE_FILE, 'r') as f:
            number_queue = deque(json.load(f))
    if os.path.exists(USER_FILE):
        with open(USER_FILE, 'r') as f:
            user_queue = deque(json.load(f))
    if os.path.exists(BINDINGS_FILE):
        with open(BINDINGS_FILE, 'r') as f:
            bindings = json.load(f)

@dp.message_handler(lambda msg: msg.text.lower() == "–Ω–æ–º–µ—Ä")
async def handle_number_request(msg: types.Message):
    if msg.chat.type == "private":
        return await msg.reply("‚ùå –ö–æ–º–∞–Ω–¥–∞ <b>–Ω–æ–º–µ—Ä</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML")

    if msg.message_thread_id in IGNORED_TOPICS:
        return await msg.reply("‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /work.")

    if msg.chat.id not in GROUP2_IDS:
        return

    for entry in user_queue:
        if entry['user_id'] == msg.from_user.id:
            return await msg.reply("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –Ω–æ–º–µ—Ä.")

    if number_queue:
        number = number_queue.popleft()

        message_text = (
           f"<b>–í–∞—à –Ω–æ–º–µ—Ä:</b> {number['text']}\n"
           f"<code>–ù–∞–∂–º–∏—Ç–µ \"–û—Ç–≤–µ—Ç–∏—Ç—å\" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –Ω–æ–º–µ—Ä–∞</code>\n\n"
           f"‚ùóÔ∏è <b>–ï—Å–ª–∏ –≤—ã–±–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É</b> ‚Äî —Å—Ä–∞–∑—É –∫–∏–¥–∞–π—Ç–µ <u>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏</u> —Ç–∞–∫ –∂–µ –æ—Ç–≤–µ—Ç–æ–º.\n"
           f"–ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ –≤–∞—Å –±—É–¥—É—Ç –¥—Ä–æ—á–∏—Ç—å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∫–∞–º–∏."
        )

        sent = await bot.send_message(
            chat_id=msg.chat.id,
            text=message_text,
            reply_to_message_id=msg.message_id,
            reply_markup=get_number_action_keyboard()
        )

        bindings[str(sent.message_id)] = {
            "orig_msg_id": number['message_id'],
            "topic_id": number['topic_id'],
            "group_id": number['from_group_id'],
            "user_id": msg.from_user.id,
            "text": number['text'],
            "added_at": number.get("added_at")
        }

        save_data()
        logger.info(f"[–í–´–î–ê–ù –ù–û–ú–ï–†] {number['text']} ‚Üí user_id={msg.from_user.id}")

    else:
        position = len(user_queue) + 1

        notify = await msg.reply(
            f"‚è≥ –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({position})",
            reply_markup=InlineKeyboardMarkup().add(
                InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="leave_queue")
            )
        )

        user_queue.append({
            "user_id": msg.from_user.id,
            "chat_id": msg.chat.id,
            "request_msg_id": msg.message_id,
            "timestamp": datetime.utcnow().isoformat(),
            "notify_msg_id": notify.message_id
        })

        save_data()
        await try_dispatch_next()
        await update_queue_messages()


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

def get_number_action_keyboard():
    return InlineKeyboardMarkup().add(
        InlineKeyboardButton("üîÅ –°–∫–∏–ø", callback_data="skip_number"),
        InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∞", callback_data="error_reason")
    )

@dp.callback_query_handler(lambda c: c.data == "error_reason")
async def error_reason_menu(call: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚ùå –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞", callback_data="error_ban"),
        InlineKeyboardButton("‚åõ –ù–µ –≤–≤–µ–ª–∏ –∫–æ–¥", callback_data="error_noban")
    )
    await call.message.edit_reply_markup(reply_markup=keyboard)

async def update_queue_messages():
    for idx, user in enumerate(sorted(user_queue, key=lambda x: x["timestamp"])):
        try:
            position = idx + 1
            await bot.edit_message_text(
                chat_id=user["chat_id"],
                message_id=user["notify_msg_id"],
                text=f"‚è≥ –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({position})",
                reply_markup=InlineKeyboardMarkup().add(
                    InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="leave_queue")
                )
            )
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–ß–ï–†–ï–î–ò] user_id={user['user_id']}: {e}")
@dp.message_handler(commands=["work"])
async def remove_topic_from_ignore(msg: types.Message):
    if msg.is_topic_message:
        if msg.message_thread_id in IGNORED_TOPICS:
            IGNORED_TOPICS.remove(msg.message_thread_id)
            await msg.reply("‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–º–µ—Ä–∞.")
        else:
            await msg.reply("‚ÑπÔ∏è –≠—Ç–∞ —Ç–µ–º–∞ –∏ —Ç–∞–∫ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ.")

@dp.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç—å"])
async def handle_clear_queue(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏
    number_queue.clear()
    user_queue.clear()
    bindings.clear()
    save_data()

    # –°–æ–æ–±—â–∞–µ–º –≤ –∫–∞–∂–¥–æ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã 1
    for topic_id in TOPIC_IDS_GROUP1:
        try:
            await bot.send_message(
                chat_id=GROUP1_ID,
                message_thread_id=topic_id,
                text="‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞"
            )
            logger.info(f"[–û–ß–ò–°–¢–ö–ê] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É {topic_id}")
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï] –¢–µ–º–∞ {topic_id}: {e}")

    await msg.reply("–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚úÖ")
    logger.info(f"[–û–ß–ò–°–¢–ö–ê] –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")
@dp.message_handler(commands=["–æ—á–µ—Ä–µ–¥—å"])
async def handle_queue_status(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    from datetime import datetime

    num_numbers = len(number_queue)
    num_users = len(user_queue)

    # –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    if num_users == 0:
        est_wait = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    elif num_numbers == 0:
        est_wait = "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞"
    else:
        seconds_total = num_users * 30  # 30 —Å–µ–∫ –Ω–∞ –æ–¥–Ω–æ–≥–æ ‚Äî —É—Å–ª–æ–≤–Ω–æ
        minutes = seconds_total // 60
        seconds = seconds_total % 60
        est_wait = f"~{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞
    if os.path.exists(QUEUE_FILE):
        timestamp = os.path.getmtime(QUEUE_FILE)
        last_updated = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
    else:
        last_updated = "–Ω/–¥"

    text = (
        "üìä <b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å</b>\n\n"
        f"üî¢ <b>–ù–æ–º–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{num_numbers}</code>\n"
        f"üë• <b>–û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{num_users}</code>\n\n"
        f"‚è±Ô∏è <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <i>{est_wait}</i>\n"
        f"üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <i>{last_updated}</i>\n\n"
        "üí° <i>–ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –∫–æ–¥—ã ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–æ–º–µ—Ä–∞ üêé</i>"
    )

    await msg.reply(text)
@dp.callback_query_handler(lambda c: c.data == "skip_number")
async def handle_skip_number(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    number_queue.append({
        "message_id": binding["orig_msg_id"],
        "topic_id": binding["topic_id"],
        "text": number_text,
        "from_group_id": binding["group_id"],
        "added_at": binding.get("added_at", datetime.utcnow().timestamp())
    })

    try:
        await call.message.edit_text("üîÅ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
    except:
        await call.message.reply("üîÅ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

    logger.info(f"[–°–ö–ò–ü] {number_text} ‚Üí user_id={user_id}")

    # –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤—è–∑–∫—É
    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()

@dp.callback_query_handler(lambda c: c.data in ["error_ban", "error_noban"])
async def handle_error_choice(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("–ù–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    if call.data == "error_ban":
        blocked_until = datetime.utcnow() + timedelta(minutes=30)
        blocked_numbers[number_text] = blocked_until.timestamp()
        await call.message.edit_text(
            "‚ùå –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)."
        )
        logger.info(f"[–û–®–ò–ë–ö–ê –° –ë–ê–ù–û–ú] {number_text} ‚Üí user_id={user_id}")

    elif call.data == "error_noban":
        await call.message.edit_text(
            "‚ùå –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚åõ –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ–¥)."
        )
        logger.info(f"[–û–®–ò–ë–ö–ê –ë–ï–ó –ë–ê–ù–ê] {number_text} ‚Üí user_id={user_id}")

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()

@dp.message_handler(commands=["id"])
async def handle_id_command(msg: types.Message):
    chat_id = msg.chat.id
    thread_id = msg.message_thread_id

    text = f"<b>Chat ID:</b> <code>{chat_id}</code>"
    if thread_id is not None:
        text += f"\n<b>Topic (Thread) ID:</b> <code>{thread_id}</code>"

    await msg.reply(text)

IGNORED_TOPICS = set()

@dp.message_handler(commands=["nework"])
async def add_topic_to_ignore(msg: types.Message):
    if msg.is_topic_message:
        IGNORED_TOPICS.add(msg.message_thread_id)
        await msg.reply("‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–∫–ª—é—á–µ–Ω–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–¥–µ—Å—å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞.")
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_number_sources(msg: types.Message):
    if msg.message_thread_id in IGNORED_TOPICS:
        return

    if msg.chat.type == "private":
        return

    if msg.chat.id == GROUP1_ID and msg.message_thread_id in TOPIC_IDS_GROUP1:
        match = phone_pattern.search(msg.text)
        if not match:
            return

        number_text = match.group(0)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
        for item in number_queue:
            if number_text in item.get("text", ""):
                try:
                    orig_msg = await bot.get_message(GROUP1_ID, item['message_id'])
                    sender = orig_msg.from_user
                    if sender.username:
                        sender_mention = f"@{sender.username}"
                    else:
                        sender_mention = f'<a href="tg://user?id={sender.id}">{sender.full_name}</a>'
                except Exception:
                    sender_mention = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                await bot.send_message(
                    chat_id=msg.chat.id,
                    message_thread_id=msg.message_thread_id,
                    reply_to_message_id=msg.message_id,
                    text=f"‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏\nüë§ –û—Ç–ø—Ä–∞–≤–∏–ª: {sender_mention}",
                    parse_mode="HTML"
                )
                logger.info(f"[–î–£–ë–õ–ò–ö–ê–¢ –í –û–ß–ï–†–ï–î–ò] {number_text}")
                return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å
        number_queue.append({
            "message_id": msg.message_id,
            "topic_id": msg.message_thread_id,
            "text": msg.text,
            "from_group_id": msg.chat.id,
            "added_at": datetime.utcnow().timestamp()
        })
        save_data()

        # –†–∞—Å—á—ë—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        if history:
            avg_delay = int(mean(entry["delay"] for entry in history if "delay" in entry))
            avg_delay = max(5, min(avg_delay, 1800))  # 5 —Å–µ–∫ ‚Äì 30 –º–∏–Ω
            minutes = avg_delay // 60
            seconds = avg_delay % 60
            estimate = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        else:
            estimate = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        await bot.send_message(
            chat_id=msg.chat.id,
            message_thread_id=msg.message_thread_id,
            reply_to_message_id=msg.message_id,
            text=f"‚úÖ –í–∑—è–ª –Ω–æ–º–µ—Ä\n\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞: <b>{estimate}</b>",
            parse_mode="HTML"
        )

        logger.info(f"[–ù–û–ú–ï–† –ü–†–ò–ù–Ø–¢] {number_text} –∏–∑ —Ç–µ–º—ã {msg.message_thread_id}")
        await try_dispatch_next()



@dp.callback_query_handler(lambda c: c.data == "leave_queue")
async def leave_queue(call: types.CallbackQuery):
    if call.message.chat.id not in GROUP2_IDS:
        return

    # –ò—â–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    removed = False
    new_queue = deque()
    for u in user_queue:
        if u['user_id'] == call.from_user.id:
            removed = True
        else:
            new_queue.append(u)

    if removed:
        user_queue.clear()
        user_queue.extend(new_queue)

        try:
            await call.message.edit_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        except Exception:
            await call.message.reply("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        logger.info(f"[–í–´–•–û–î –ò–ó –û–ß–ï–†–ï–î–ò] user_id={call.from_user.id}")
    else:
        await call.answer("–í—ã –Ω–µ –±—ã–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)

    save_data()
    await update_queue_messages()




@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def handle_photo_response(msg: types.Message):
    if not msg.reply_to_message:
        return

    binding = bindings.get(str(msg.reply_to_message.message_id))
    if not binding:
        return

    try:
        await bot.send_photo(
            chat_id=binding['group_id'],
            photo=msg.photo[-1].file_id,
            message_thread_id=binding['topic_id'],
            reply_to_message_id=binding['orig_msg_id']
        )

        await msg.reply("‚úÖ –ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        added_at = binding.get("added_at")
        if added_at:
            now = datetime.utcnow().timestamp()
            delay = now - added_at
            history.append({
                "added": added_at,
                "responded": now,
                "delay": delay
            })
            history[:] = history[-50:]
            save_history()
            logger.info(f"[–ö–û–î –ü–û–õ–£–ß–ï–ù] user_id={binding['user_id']} ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ {int(delay)} —Å–µ–∫")

    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–û–î–ê] {e}")
        await msg.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä ‚Äî –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏."
        )

    finally:
        del bindings[str(msg.reply_to_message.message_id)]
        save_data()


async def joke_dispatcher():
    sent_users = set()

    while True:
        now = datetime.utcnow().timestamp()

        for user in list(user_queue):
            ts = datetime.fromisoformat(user["timestamp"]).timestamp()

            # –ñ–¥—ë—Ç –¥–æ–ª—å—à–µ 60 —Å–µ–∫ –∏ –∞–Ω–µ–∫–¥–æ—Ç –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏
            if now - ts >= 60 and user['user_id'] not in sent_users:
                joke = await fetch_russian_joke()

                try:
                    await bot.send_message(
                        chat_id=user["chat_id"],
                        text=f"üïì –ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ, –≤–æ—Ç –≤–∞–º –∞–Ω–µ–∫–¥–æ—Ç:\n\n<code>{joke}</code>",
                        parse_mode="HTML",
                        reply_to_message_id=user.get("request_msg_id")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–º—É, –æ—Ç–≤–µ—Ç–æ–º
                    )
                    sent_users.add(user['user_id'])

                except Exception as e:
                    logger.warning(f"[–ê–ù–ï–ö–î–û–¢] user_id={user['user_id']}: {e}")

        await asyncio.sleep(30)


JOKES = [
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑ –ß–∞—Å—Ç—å¬†1 (–æ–∫–æ–ª–æ 20)
    "‚Äî –ú–∞–º–∞, —á—Ç–æ —Ç–∞–∫–æ–µ —á–µ—Ä–Ω—ã–π —é–º–æ—Ä? ‚Äî –°—ã–Ω–æ–∫, –≤–∏–¥–∏—à—å –≤–æ–Ω —Ç–∞–º –º—É–∂—á–∏–Ω—É –±–µ–∑ —Ä—É–∫? –í–µ–ª–∏ –µ–º—É –ø–æ—Ö–ª–æ–ø–∞—Ç—å –≤ –ª–∞–¥–æ—à–∏. ‚Äî –Ø –∂–µ —Å–ª–µ–ø–æ–π! ‚Äî –í–æ—Ç –∏–º–µ–Ω–Ω–æ.",
    "–Ø –∫–æ–ø–∞–ª —è–º—É –≤ —Å–∞–¥—É –∏ –≤–¥—Ä—É–≥ –æ—Ç–∫–æ–ø–∞–ª —Ü–µ–ª—ã–π —Å—É–Ω–¥—É–∫ —Å –∑–æ–ª–æ—Ç–æ–º. –ü–æ—Ç–æ–º –≤—Å–ø–æ–º–Ω–∏–ª, –∑–∞—á–µ–º —è –∫–æ–ø–∞–ª —è–º—É.",
    "‚Äî –ë—É–¥–µ—à—å –≤—ã—Ö–æ–¥–∏—Ç—å ‚Äî —Ç—Ä—É–ø –≤—ã–Ω–µ—Å–∏! ‚Äî –ú–æ–∂–µ—Ç –º—É—Å–æ—Ä? ‚Äî –ú–æ–∂–µ—Ç –º—É—Å–æ—Ä, –º–æ–∂–µ—Ç —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫, –±–æ–≥ –µ–≥–æ –∑–Ω–∞–µ—Ç‚Ä¶",
    "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Å—É–Ω—É—Ç—å –ª–∞–º–ø–æ—á–∫—É –≤ —Ä–æ—Ç, –ø—Ä–æ–±–ª–µ–º–∞ –≤—ã–∑–≤–∞—Ç—å –ø–æ—Ç–æ–º ¬´—Å–∫–æ—Ä—É—é –ø–æ–º–æ—â—å¬ª.",
    "–û–¥–Ω—É –¥–µ–≤–æ—á–∫—É –≤ —à–∫–æ–ª–µ –∑–≤–∞–ª–∏ –ö—Ä–æ–∫–æ–¥–∏–ª–æ–º. –ù–µ –ø–æ—Ç–æ–º—É —á—Ç–æ —É—Ä–æ–¥–∏–Ω–∞, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–¥–Ω–∞–∂–¥—ã –∑–∞—Ç–∞—â–∏–ª–∞ –≤ —Ä–µ–∫—É –æ–ª–µ–Ω—è –∏ —Å–æ–∂—Ä–∞–ª–∞ –µ–≥–æ.",
    "‚Äî –Ø –±–æ—é—Å—å –ø—Ä—ã–≥–∞—Ç—å ‚Äî –≤–¥—Ä—É–≥ –ø–∞—Ä–∞—à—é—Ç –Ω–µ —Ä–∞—Å–∫—Ä–æ–µ—Ç—Å—è? ‚Äî –ï—â—ë –Ω–∏–∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∂–∞–ª–æ–≤–∞–ª—Å—è, —á—Ç–æ —É –Ω–µ–≥–æ –Ω–µ —Ä–∞—Å–∫—Ä—ã–ª—Å—è –ø–∞—Ä–∞—à—é—Ç.",
    "‚Äî –ü–æ—á–µ–º—É-—Ç–æ, –∫–æ–≥–¥–∞ –≤—ã —É–ª—ã–±–∞–µ—Ç–µ—Å—å, –æ–¥–∏–Ω –≥–ª–∞–∑ –≤–µ—Å—ë–ª—ã–π, –¥—Ä—É–≥–æ–π –≥—Ä—É—Å—Ç–Ω—ã–π‚Äë–≥—Ä—É—Å—Ç–Ω—ã–π‚Ä¶ ‚Äî –í–µ—Å—ë–ª—ã–π ‚Äî —ç—Ç–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π.",
    "–ò–∑ –∑–∞–ø–∏—Å–∏ –≤ –∫–Ω–∏–≥–µ –∂–∞–ª–æ–± –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ¬´–í–µ—Ä—ë–≤–∫–∏ –≤ —Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω–æ–º, –º—ã–ª–æ –≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–º, —Ç–∞–±—É—Ä–µ—Ç–∫–∏ –Ω–∞ –¥—Ä—É–≥–æ–º —ç—Ç–∞–∂–µ¬ª.",
    "‚Äî –£—Ä–∞, —è –ø–æ—Å—Ç—É–ø–∏–ª–∞ –≤ –∞–≤—Ç–æ—à–∫–æ–ª—É. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ –ø–µ—à–µ—Ö–æ–¥–∞ –º–µ–Ω—å—à–µ! ‚Äî –ê –º–æ–∂–µ—Ç –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç...",
    "–ö–æ–≥–¥–∞ –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—å USB‚Äë–ø–æ—Ä—Ç–∞ —É–º–µ—Ä, –µ–≥–æ –≥—Ä–æ–± —Å–Ω–∞—á–∞–ª–∞ –æ–ø—É—Å—Ç–∏–ª–∏, –ø–æ—Ç–æ–º –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∏ –∏ –æ–ø—É—Å—Ç–∏–ª–∏ —Å–Ω–æ–≤–∞.",
    "‚Äî –ú–æ—è –¥–µ–≤—É—à–∫–∞ –ø–æ—Ä–≤–∞–ª–∞ —Å–æ –º–Ω–æ–π, —è –∑–∞–±—Ä–∞–ª –µ—ë –∫—Ä–µ—Å–ª–æ‚Äë–∫–∞—Ç–∞–ª–∫—É. –£–≥–∞–¥–∞–π—Ç–µ, –∫—Ç–æ –ø—Ä–∏–ø–æ–ª–∑ –∫–æ –º–Ω–µ –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö?",
    "–ï—Å–ª–∏ –±—ã –º–æ—è –±–∞–±—É—à–∫–∞ –∑–Ω–∞–ª–∞, —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —è —Å—ç–∫–æ–Ω–æ–º–∏–ª –Ω–∞ –µ—ë –ø–æ—Ö–æ—Ä–æ–Ω–∞—Ö, –æ–Ω–∞ –±—ã –ø–µ—Ä–µ–≤–µ—Ä–Ω—É–ª–∞—Å—å –≤ –∫–∞–Ω–∞–≤–µ.",
    "31 –¥–µ–∫–∞–±—Ä—è. –ú—É–∂–∏–∫ —Å—Ç–∞–≤–∏—Ç —Ç–∞–±—É—Ä–µ—Ç–∫—É –∏ –≤–µ—Ä—ë–≤–∫—É –Ω–∞ –ª—é—Å—Ç—Ä—É. –í–≤–∞–ª–∏–≤–∞–µ—Ç—Å—è –ø—å—è–Ω—ã–π –î–µ–¥ –ú–æ—Ä–æ–∑‚Ä¶ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é: ¬´–ú‚Äë–¥–∞?.. –ù—É, —Ä–∞–∑ —Ç—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –Ω–∞ —Ç–∞–±—É—Ä–µ—Ç–æ—á–∫–µ...¬ª",
    "–ó–∞–∂–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –∫–æ—Å—Ç—ë—Ä ‚Äî –µ–º—É —Ç–µ–ø–ª–æ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è. –ó–∞–∂–≥–∏ –æ–¥–µ–∂–¥—É ‚Äî —Ç–µ–ø–ª–æ –¥–æ –∫–æ–Ω—Ü–∞ –∂–∏–∑–Ω–∏.",
    "–ê–∫—Ä–æ–±–∞—Ç —É–º–µ—Ä –Ω–∞ –±–∞—Ç—É—Ç–µ, –Ω–æ –µ—â—ë –∫–∞–∫–æ–µ-—Ç–æ –≤—Ä–µ–º—è –ø—Ä–æ–¥–æ–ª–∂–∞–ª —Ä–∞–¥–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫—É.",
    "–®—É—Ç–∫–∏ –ø—Ä–æ —É—Ç–æ–ø–ª–µ–Ω–Ω–∏–∫–æ–≤ –æ–±—ã—á–Ω–æ –Ω–µ—Å–º–µ—à–Ω—ã–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ª–µ–∂–∞—Ç –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏.",
    "‚Äî –ö–æ—Ç —É–º–µ—Ä –≥–æ–¥ –Ω–∞–∑–∞–¥. –Ø –¥–æ —Å–∏—Ö –ø–æ—Ä –∑–∞–º–µ–¥–ª—è—é —à–∞–≥ —Ç–∞–º, –≥–¥–µ –æ–Ω –ª—é–±–∏–ª –ª–µ–∂–∞—Ç—å. ‚Äî –ú–æ–∂–µ—Ç, –ø–æ—Ä–∞ –µ–≥–æ –ø–æ—Ö–æ—Ä–æ–Ω–∏—Ç—å?",
    "‚Äî –î–æ–∫—Ç–æ—Ä, —è —Å—ä–µ–ª –ø–∏—Ü—Ü—É –≤–º–µ—Å—Ç–µ —Å —É–ø–∞–∫–æ–≤–∫–æ–π. –Ø —É–º—Ä—É? ‚Äî –ù—É, –≤—Å–µ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å —É–º—Ä—É—Ç‚Ä¶ ‚Äî –í—Å–µ —É–º—Ä—É—Ç! –£–∂–∞—Å, —á—Ç–æ —è –Ω–∞–¥–µ–ª–∞–ª!",
    "–û–¥–Ω–æ—Ä—É–∫–∏–π —á–µ–ª–æ–≤–µ–∫ –∑–∞–ø–ª–∞–∫–∞–ª, —É–≤–∏–¥–µ–≤ –º–∞–≥–∞–∑–∏–Ω ¬´—Å–µ–∫–æ–Ω–¥‚Äë—Ö–µ–Ω–¥¬ª.",
    "> –ö–æ–≥–¥–∞ —Ç—ã —É–º–µ—Ä, —Ç—ã –æ–± —ç—Ç–æ–º –Ω–µ –∑–Ω–∞–µ—à—å, —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥–∏–º —Ç—è–∂–µ–ª–æ. –¢–æ –∂–µ —Å–∞–º–æ–µ, –∫–æ–≥–¥–∞ —Ç—ã —Ç—É–ø–æ–π."
    ,
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–∑ –ß–∞—Å—Ç—å¬†2 (~20)
    "‚Äî –î–æ–∫—Ç–æ—Ä! –í –º–æ–µ–π –ø–∞–ª–∞—Ç–µ —É–º–∏—Ä–∞–µ—Ç —É–∂–µ –¥–µ–≤—è—Ç—ã–π –ø–∞—Ü–∏–µ–Ω—Ç. –ü–æ—á–µ–º—É –±—ã –≤–∞–º –Ω–µ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ª–∞—Ç—É –¥–ª—è –æ–±—Ä–µ—á—ë–Ω–Ω—ã—Ö? ‚Äî –≠—Ç–æ –æ–Ω–∞ –∏ –µ—Å—Ç—å.",
    "‚Äî –ò–∑–≤–∏–Ω–∏—Ç–µ, –∞ –∫–∞–∫–æ–π –∑–¥–µ—Å—å –ø–∞—Ä–æ–ª—å –æ—Ç –≤–∞–π‚Äë—Ñ–∞—è? ‚Äî –≠—Ç–æ –∂–µ –ø–æ—Ö–æ—Ä–æ–Ω—ã! ‚Äî ¬´–ü–æ—Ö–æ—Ä–æ–Ω—ã¬ª —Å –º–∞–ª–µ–Ω—å–∫–æ–π –∏–ª–∏ –±–æ–ª—å—à–æ–π?",
    "–ß–µ–º —Å—Ç–∞—Ä–µ–µ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å, —Ç–µ–º —á–∞—â–µ –≤—Å–ø–æ–º–∏–Ω–∞—é –≤—Å–µ—Ö, –∫–æ–≥–æ –ø–æ—Ç–µ—Ä—è–ª –Ω–∞–≤—Å–µ–≥–¥–∞. –†–∞–±–æ—Ç–∞—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–º –≥–∏–¥–æ–º –±—ã–ª–æ –ø–ª–æ—Ö–æ–π –∏–¥–µ–µ–π.",
    "–í –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω–µ –∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ. –ü–æ–≥–∏–±–ª–æ 300‚ÄØ000 —Ç–∞–¥–∂–∏–∫–æ–≤. –ê–º–µ—Ä–∏–∫–∞ –ø–æ—Å–ª–∞–ª–∞ –¥–µ–Ω—å–≥–∏, –ì–µ—Ä–º–∞–Ω–∏—è ‚Äî –ø—Ä–æ–¥—É–∫—Ç—ã, –†–æ—Å—Å–∏—è ‚Äî 300‚ÄØ000 —Ç–∞–¥–∂–∏–∫–æ–≤.",
    "–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫—É—Ä—é —è –∏–ª–∏ –Ω–µ—Ç, —Ä–æ–¥–∏—Ç–µ–ª–∏ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –≥–∞–∑ –≤–∫–ª—é—á—ë–Ω–Ω—ã–º.",
    "–§–∞–ª—å—à–∏–≤–æ–≥–æ –¥—Ä–µ—Å—Å–∏—Ä–æ–≤—â–∏–∫–∞ –≤ —Ü–∏—Ä–∫–µ –±—ã—Å—Ç—Ä–æ —Ä–∞—Å–∫—É—Å–∏–ª–∏.",
    "–ü—Ä–æ—á–∏—Ç–∞–ª, —á—Ç–æ –Ω–∞ –ö–∞–≤–∫–∞–∑–µ –∫–∞–∂–¥—ã–µ –¥–≤–µ –º–∏–Ω—É—Ç—ã –ø—Ä–æ—Ç—ã–∫–∞—é—Ç —á–µ–ª–æ–≤–µ–∫–∞ –Ω–æ–∂–æ–º. –ñ–∞–ª–∫–æ –±–µ–¥–æ–ª–∞–≥—É.",
    "> –ë–æ—Ä–æ–¥–∞ –ø—Ä–∏–¥–∞—ë—Ç –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç–∏: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –ø–æ–≤–µ–¥—ë—Ç —á–µ–ª–æ–≤–µ–∫, –µ—Å–ª–∏ –ø–æ–¥–∂–µ—á—å –µ–º—É –±–æ—Ä–æ–¥—É.",
    "–°–æ—Å–µ–¥–∏ –ø—å—é—Ç, –¥–µ—Ä—É—Ç—Å—è –∏ –ø–æ—é—Ç. –†–µ—à–∏–ª –ø–µ—Ä–µ–µ—Ö–∞—Ç—å, –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –æ–Ω–∏ –≤–º–µ—Å—Ç–µ –¥–æ—Ä–æ–≥—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –±—É–¥—É—Ç.",
    "‚Äî –ë–∞–±—É—à–∫–∞, –∑–∞—á–µ–º —É–¥–∞–ª–∏–ª–∞—Å—å –∏–∑ ¬´–û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–æ–≤¬ª? ‚Äî –û–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å.",
    "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞. –ë–µ–ª—ã–µ –≤–µ–¥—É—Ç –±–æ–ª—å—à–µ–≤–∏–∫–∞ –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–µ–ª. –ù–æ—á—å, –≤–µ—Ç–µ—Ä, –ª–∏–≤–µ–Ω—å. ‚Äî –¢–µ–±–µ —á—Ç–æ? ‚Äî –ê –Ω–∞–º –µ—â—ë –Ω–∞–∑–∞–¥ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è.",
    "¬´–Ø —á—Ç–æ‚Äë—Ç–æ –Ω–∞–∂–∞–ª, –∏ –≤—Å—ë –∏—Å—á–µ–∑–ª–æ¬ª. –ö—É—Ä—Ç –ö–æ–±–µ–π–Ω.",
    "¬´–ú–∏–Ω—É—Å –Ω–∞ –º–∏–Ω—É—Å –¥–∞—ë—Ç –ø–ª—é—Å. –ü–æ—ç—Ç–æ–º—É —è–¥–æ–≤–∏—Ç—ã–µ –≥—Ä–∏–±—ã –∑–∞–ø–∏–≤–∞—é –º–µ—Ç–∏–ª–æ–≤—ã–º —Å–ø–∏—Ä—Ç–æ–º.¬ª",
    "¬´–ò–¥—É —Å–µ–±–µ‚Ä¶ –±–µ–∑—Ä—É–∫–∏–π –º–∞–ª—å—á–∏–∫¬ª. –¢–∞–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —Ä–∞—Å—Å–∫–∞–∑ –±–µ–∑—Ä—É–∫–æ–≥–æ.",
    "–°–ª–µ–ø–æ–π –≤ –º–∞–≥–∞–∑–∏–Ω–µ —Ä–∞—Å–∫—Ä—É—á–∏–≤–∞–µ—Ç –ø–æ–≤–æ–¥—ã—Ä—è –Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π: ¬´–û—Å–º–∞—Ç—Ä–∏–≤–∞—é—Å—å¬ª.",
    "–ë–µ–¥–∞ –Ω–µ –ø—Ä–∏–¥—ë—Ç –æ–¥–Ω–∞. –ü–æ—Å–ª–µ –≤–∑—Ä—ã–≤–∞ –Ω–∞ —Ü–µ–º–µ–Ω—Ç–Ω–æ–º –∑–∞–≤–æ–¥–µ –ø–æ—à—ë–ª –¥–æ–∂–¥—å ‚Äî –∂–∏–∑–Ω—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º—ë—Ä–∑–ª–∞.",
    "–ù–µ –Ω—É–∂–Ω–æ —Ç—ã–∫–∞—Ç—å –≤ –º–µ–Ω—è –ø–∞–ª—å—Ü–µ–º. –¢–∫–Ω–∏—Ç–µ —Å–µ–±–µ –≤ –≥–ª–∞–∑ ‚Äî —á—Ç–æ–± –º–µ–Ω—è –Ω–µ –≤–∏–¥–µ—Ç—å.",
    "–û–∫–µ–π, Google, –º–æ–∂–Ω–æ –ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∞—Ö –¥–µ–¥–∞ –≤ –±–∞–Ω–∫–µ –∏–∑‚Äë–ø–æ–¥ Coca‚ÄëCola, –µ—Å–ª–∏ –∏–º—è –ø–æ–¥—Ö–æ–¥–∏—Ç?",
    "‚Äî –° –∫–µ–º –ø–æ–æ–±–µ–¥–∞—Ç—å? ‚Äî –õ—É—á—à–µ —Å —É–º–µ—Ä—à–∏–º. –ï—Å—Ç –º–∞–ª–æ, –¥–æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–æ–ª—å—à–µ.",
    "‚Äî –û—Ç–¥–∞—Ç—å –ø–æ—á–∫—É –±–æ–ª—å–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫ –ª—é–±–∏—Ç. –ê –ø—è—Ç—å ‚Äî —É–∂–µ –ø–æ–ª–∏—Ü–∏—è.",
]

import aiohttp

import random

async def fetch_russian_joke():
    return random.choice(JOKES)



async def try_dispatch_next():
    # –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –∞ –∫—Ç–æ-—Ç–æ –∂–¥—ë—Ç ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –≤ —Ç–µ–º–µ
    if not number_queue and user_queue:
        now = datetime.utcnow().timestamp()
        if not hasattr(try_dispatch_next, "last_notice") or now - try_dispatch_next.last_notice > 120:
            try_dispatch_next.last_notice = now
            for topic_id in TOPIC_IDS_GROUP1:
                try:
                    await bot.send_message(
                        chat_id=GROUP1_ID,
                        message_thread_id=topic_id,
                        text="üö® –û—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞! –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–¥—ã –Ω–∞ –¥–∏–∫–æ–º –∑–∞–ø–∞–¥–µ!"
                    )
                    logger.info(f"[–û–ü–û–í–ï–©–ï–ù–ò–ï] –ü—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å ‚Üí —Ç–µ–º–∞ {topic_id}")
                except Exception as e:
                    logger.warning(f"[–û–®–ò–ë–ö–ê –û–ü–û–í–ï–©–ï–ù–ò–Ø] —Ç–µ–º–∞ {topic_id}: {e}")
        return  # –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç ‚Äî –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º

    # –ü–æ–∫–∞ –µ—Å—Ç—å –∏ –Ω–æ–º–µ—Ä–∞, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    while number_queue and user_queue:
        number = number_queue.popleft()
        sorted_users = sorted(user_queue, key=lambda u: datetime.fromisoformat(u['timestamp']))
        user = sorted_users[0]
        user_queue.remove(user)

        await update_queue_messages()

        message_text = (
           f"<b>–í–∞—à –Ω–æ–º–µ—Ä:</b> {number['text']}\n"
           f"<code>–ù–∞–∂–º–∏—Ç–µ \"–û—Ç–≤–µ—Ç–∏—Ç—å\" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –Ω–æ–º–µ—Ä–∞</code>\n\n"
           f"‚ùóÔ∏è <b>–ï—Å–ª–∏ –≤—ã–±–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É</b> ‚Äî —Å—Ä–∞–∑—É –∫–∏–¥–∞–π—Ç–µ <u>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏</u> —Ç–∞–∫ –∂–µ –æ—Ç–≤–µ—Ç–æ–º.\n"
           f"–ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ –≤–∞—Å –±—É–¥—É—Ç –¥—Ä–æ—á–∏—Ç—å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∫–∞–º–∏."
        )
        try:
            sent = await bot.send_message(
                chat_id=user['chat_id'],
                text=message_text,
                reply_to_message_id=user['request_msg_id'],
                reply_markup=get_number_action_keyboard()
            )
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò] user_id={user['user_id']}: {e}")
            continue

        bindings[str(sent.message_id)] = {
            "orig_msg_id": number['message_id'],
            "topic_id": number['topic_id'],
            "group_id": number['from_group_id'],
            "user_id": user['user_id'],
            "text": number['text'],
            "added_at": number.get("added_at")
        }

        save_data()
        logger.info(f"[–ê–í–¢–û–í–´–î–ê–ß–ê] {number['text']} ‚Üí user_id={user['user_id']}")






if __name__ == '__main__':
    load_data()
    load_history()
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.create_task(joke_dispatcher())
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    executor.start_polling(dp, skip_updates=True)
