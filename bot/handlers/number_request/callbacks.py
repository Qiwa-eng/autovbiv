from datetime import datetime, timedelta

from aiogram import F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from ...config import bot, GROUP2_IDS, logger
from ...queue import (
    number_queue,
    user_queue,
    bindings,
    contact_bindings,
    blocked_numbers,
    contact_requests,
    number_queue_lock,
    user_queue_lock,
    active_numbers,
    pending_code_requests,
    pending_balance_requests,
)
from ...storage import save_data
from .utils import update_queue_messages, try_dispatch_next
from . import router


@router.callback_query(F.data == "error_reason")
async def error_reason_menu(call: CallbackQuery) -> None:
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üí• –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞", callback_data="error_ban"),
         InlineKeyboardButton("‚åõ –ö–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª", callback_data="error_noban")]
    ])
    await call.message.edit_text(
        f"{call.message.html_text}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:</b>",
        reply_markup=keyboard,
    )


@router.callback_query(F.data == "skip_number")
async def handle_skip_number(call: CallbackQuery) -> None:
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding.get("number") or binding["text"]

    async with number_queue_lock:
        number_queue.append(
            {
                "message_id": binding["orig_msg_id"],
                "topic_id": binding["topic_id"],
                "text": number_text,
                "number": number_text,
                "from_group_id": binding["group_id"],
                "added_at": binding.get("added_at", datetime.utcnow().timestamp()),
            }
        )

    try:
        await call.message.edit_text("üîÑ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
    except Exception:
        await call.message.reply("üîÑ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

    logger.info(f"[–°–ö–ò–ü] {number_text} ‚Üí user_id={user_id}")

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()


@router.callback_query(F.data == "contact_drop")
async def handle_contact_drop(call: CallbackQuery) -> None:
    msg_id = call.message.message_id
    msg_key = str(msg_id)
    binding = bindings.get(msg_key) or contact_bindings.get(msg_key)

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    contact_requests[call.from_user.id] = {
        "number": binding.get("number") or binding.get("text"),
        "group_id": binding.get("group_id"),
        "topic_id": binding.get("topic_id"),
        "orig_msg_id": binding.get("orig_msg_id"),
    }
    drop_id = binding.get("drop_id")
    if drop_id:
        contact_requests[call.from_user.id]["drop_id"] = drop_id
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–±–æ —Ñ–æ—Ç–æ:")
    await call.answer()


@router.callback_query(F.data.in_({"error_ban", "error_noban"}))
async def handle_error_choice(call: CallbackQuery) -> None:
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("–ù–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding.get("number") or binding["text"]

    if call.data == "error_ban":
        blocked_until = datetime.utcnow() + timedelta(minutes=30)
        blocked_numbers[number_text] = blocked_until.timestamp()
        await call.message.edit_text(
            "üö´ –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)."
        )
        reason = "–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
        logger.info(f"[–û–®–ò–ë–ö–ê –° –ë–ê–ù–û–ú] {number_text} ‚Üí user_id={user_id}")
    else:
        await call.message.edit_text(
            "üö´ –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚åõ –ö–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª."
        )
        reason = "–Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ–¥"
        logger.info(f"[–û–®–ò–ë–ö–ê –ë–ï–ó –ë–ê–ù–ê] {number_text} ‚Üí user_id={user_id}")

    try:
        await bot.send_message(
            chat_id=binding["group_id"],
            message_thread_id=binding["topic_id"],
            reply_to_message_id=binding["orig_msg_id"],
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ: {reason}",
        )
    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–ü–û–í–ï–©–ï–ù–ò–Ø –û–®–ò–ë–ö–ò] {e}")

    queue_user = binding.get("queue_data")
    if queue_user:
        async with user_queue_lock:
            user_queue.append(queue_user)
        await update_queue_messages()

    bindings.pop(str(msg_id), None)
    active_numbers.discard(number_text)
    save_data()
    await try_dispatch_next()


@router.message(lambda msg: msg.from_user.id in contact_requests)
async def forward_contact_message(msg: Message) -> None:
    info = contact_requests.pop(msg.from_user.id)
    number = info.get("number")
    group_id = info.get("group_id")
    topic_id = info.get("topic_id")
    orig_msg_id = info.get("orig_msg_id")

    try:
        if msg.photo:
            caption = f"–ü–æ –Ω–æ–º–µ—Ä—É {number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}\n{msg.caption or ''}"
            await bot.send_photo(
                chat_id=group_id,
                photo=msg.photo[-1].file_id,
                caption=caption,
                message_thread_id=topic_id,
                reply_to_message_id=orig_msg_id,
            )
        elif msg.text:
            text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É {number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}:\n{msg.text}"
            await bot.send_message(
                chat_id=group_id,
                text=text,
                message_thread_id=topic_id,
                reply_to_message_id=orig_msg_id,
            )
        else:
            await msg.reply("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ.")
            return
        await msg.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –í –ì–†–£–ü–ü–£] {e}")
        await msg.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É.")


@router.callback_query(F.data == "leave_queue")
async def leave_queue(call: CallbackQuery) -> None:
    if call.message.chat.id not in GROUP2_IDS:
        return

    async with user_queue_lock:
        removed = False
        new_queue = []
        for u in user_queue:
            if u["user_id"] == call.from_user.id:
                removed = True
            else:
                new_queue.append(u)

        if removed:
            user_queue.clear()
            user_queue.extend(new_queue)

    if removed:
        try:
            await call.message.edit_text("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
        except Exception:
            await call.message.reply("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
        logger.info(f"[–í–´–•–û–î –ò–ó –û–ß–ï–†–ï–î–ò] user_id={call.from_user.id}")
    else:
        await call.answer("‚ö†Ô∏è –í–∞—Å –Ω–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)


@router.callback_query(F.data.in_({"request_code1", "request_code2"}))
async def handle_code_request(call: CallbackQuery) -> None:
    msg_id = call.message.message_id
    binding = bindings.get(str(msg_id))
    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    number_text = binding.get("number") or binding.get("text")
    code_type = "–ø–µ—Ä–≤—ã–π" if call.data == "request_code1" else "–≤—Ç–æ—Ä–æ–π"

    sent = await bot.send_message(
        chat_id=binding["group_id"],
        message_thread_id=binding["topic_id"],
        reply_to_message_id=binding["orig_msg_id"],
        text=f"–ó–∞–ø—Ä–æ—Å {code_type} –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞ {number_text}. –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–¥–æ–º.",
    )

    pending_code_requests[sent.message_id] = {
        "type": code_type,
        "target_chat_id": call.message.chat.id,
        "target_message_id": msg_id,
    }

    await call.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.message(lambda m: m.reply_to_message and m.reply_to_message.message_id in pending_code_requests)
async def handle_code_response(msg: Message) -> None:
    req = pending_code_requests.pop(msg.reply_to_message.message_id, None)
    if not req:
        return
    code = msg.text.strip()
    label = "–ü–µ—Ä–≤—ã–π" if req["type"] == "–ø–µ—Ä–≤—ã–π" else "–í—Ç–æ—Ä–æ–π"
    await bot.send_message(
        req["target_chat_id"],
        f"{label} –∫–æ–¥: {code}",
        reply_to_message_id=req["target_message_id"],
    )


@router.callback_query(F.data == "mts_calls")
async def handle_mts_calls(call: CallbackQuery) -> None:
    binding = bindings.get(str(call.message.message_id))
    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
    await bot.send_message(
        chat_id=binding["group_id"],
        message_thread_id=binding["topic_id"],
        reply_to_message_id=binding["orig_msg_id"],
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –ú–¢–° –∑–≤–æ–Ω–∫–∏, —Ç—É—Ç–æ—Ä –µ—Å—Ç—å –≤ –≥—Ä—É–ø–ø–µ",
    )
    await call.answer("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")


@router.callback_query(F.data == "neg_balance")
async def handle_negative_balance(call: CallbackQuery) -> None:
    binding = bindings.get(str(call.message.message_id))
    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("–î–∞", callback_data=f"balance_yes:{call.message.message_id}"),
         InlineKeyboardButton("–ù–µ—Ç", callback_data=f"balance_no:{call.message.message_id}")]
    ])

    sent = await bot.send_message(
        chat_id=binding["group_id"],
        message_thread_id=binding["topic_id"],
        reply_to_message_id=binding["orig_msg_id"],
        text="–í–∞—à –±–∞–ª–∞–Ω—Å –º–∏–Ω—É—Å–æ–≤–æ–π, –±—É–¥–µ—Ç–µ –ø–æ–ø–æ–ª–Ω—è—Ç—å?",
        reply_markup=keyboard,
    )

    pending_balance_requests[sent.message_id] = {
        "target_chat_id": call.message.chat.id,
        "target_message_id": call.message.message_id,
        "drop_id": binding.get("drop_id"),
    }

    await call.answer("–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")


@router.callback_query(F.data.startswith("balance_"))
async def handle_balance_choice(call: CallbackQuery) -> None:
    action, _ = call.data.split(":", 1)
    info = pending_balance_requests.get(call.message.message_id)
    if not info:
        return await call.answer("–ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

    drop_id = info.get("drop_id")
    if drop_id and call.from_user.id != drop_id:
        return await call.answer("–ù–µ –¥–ª—è –≤–∞—Å", show_alert=True)

    text = "–ü–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å" if action == "balance_yes" else "–ù–µ –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω—è—Ç—å"
    await bot.send_message(
        info["target_chat_id"],
        text,
        reply_to_message_id=info["target_message_id"],
    )
    await call.message.edit_text(f"–û—Ç–≤–µ—Ç: {'–î–∞' if action == 'balance_yes' else '–ù–µ—Ç'}")
    pending_balance_requests.pop(call.message.message_id, None)
    await call.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
