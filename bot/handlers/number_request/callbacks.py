from datetime import datetime, timedelta

from aiogram import types

from ...config import dp, bot, GROUP2_IDS, logger
from ...queue import (
    number_queue,
    user_queue,
    bindings,
    contact_bindings,
    blocked_numbers,
    contact_requests,
    number_queue_lock,
    user_queue_lock,
)
from ...storage import save_data
from .utils import update_queue_messages, try_dispatch_next


@dp.callback_query_handler(lambda c: c.data == "error_reason")
async def error_reason_menu(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("üí• –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞", callback_data="error_ban"),
        types.InlineKeyboardButton("‚åõ –ö–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª", callback_data="error_noban"),
    )
    await call.message.edit_text(
        f"{call.message.html_text}\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:</b>",
        parse_mode="HTML",
        reply_markup=keyboard,
    )


@dp.callback_query_handler(lambda c: c.data == "skip_number")
async def handle_skip_number(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    async with number_queue_lock:
        number_queue.append(
            {
                "message_id": binding["orig_msg_id"],
                "topic_id": binding["topic_id"],
                "text": number_text,
                "from_group_id": binding["group_id"],
                "added_at": binding.get("added_at", datetime.utcnow().timestamp()),
            }
        )

    try:
        await call.message.edit_text("üîÑ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
    except Exception:
        await call.message.reply("üîÑ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

    logger.info(f"[–°–ö–ò–ü] {number_text} ‚Üí user_id={user_id}")

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()


@dp.callback_query_handler(lambda c: c.data == "contact_drop")
async def handle_contact_drop(call: types.CallbackQuery):
    msg_id = call.message.message_id
    msg_key = str(msg_id)
    binding = bindings.get(msg_key) or contact_bindings.get(msg_key)

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    drop_id = binding.get("drop_id")
    if not drop_id:
        return await call.answer("‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –¥—Ä–æ–ø–æ–º.", show_alert=True)

    contact_requests[call.from_user.id] = {
        "drop_id": drop_id,
        "number": binding.get("text"),
    }
    await call.message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–∏–±–æ —Ñ–æ—Ç–æ:")
    await call.answer()


@dp.callback_query_handler(lambda c: c.data in ["error_ban", "error_noban"])
async def handle_error_choice(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("–ù–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    if call.data == "error_ban":
        blocked_until = datetime.utcnow() + timedelta(minutes=30)
        blocked_numbers[number_text] = blocked_until.timestamp()
        await call.message.edit_text(
            "üö´ –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)."
        )
        reason = "–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
        logger.info(f"[–û–®–ò–ë–ö–ê –° –ë–ê–ù–û–ú] {number_text} ‚Üí user_id={user_id}")
    else:
        await call.message.edit_text(
            "üö´ –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚åõ –ö–æ–¥ –Ω–µ –ø—Ä–∏—à—ë–ª."
        )
        reason = "–Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ–¥"
        logger.info(f"[–û–®–ò–ë–ö–ê –ë–ï–ó –ë–ê–ù–ê] {number_text} ‚Üí user_id={user_id}")

    try:
        await bot.send_message(
            chat_id=binding["group_id"],
            message_thread_id=binding["topic_id"],
            reply_to_message_id=binding["orig_msg_id"],
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ: {reason}",
        )
    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–ü–û–í–ï–©–ï–ù–ò–Ø –û–®–ò–ë–ö–ò] {e}")

    queue_user = binding.get("queue_data")
    if queue_user:
        async with user_queue_lock:
            user_queue.append(queue_user)
        await update_queue_messages()

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()


@dp.message_handler(lambda msg: msg.from_user.id in contact_requests, content_types=types.ContentTypes.ANY)
async def forward_contact_message(msg: types.Message):
    info = contact_requests.pop(msg.from_user.id)
    drop_id = info["drop_id"]
    number = info.get("number")

    try:
        if msg.photo:
            caption = f"–ü–æ –Ω–æ–º–µ—Ä—É {number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}\n{msg.caption or ''}"
            await bot.send_photo(drop_id, msg.photo[-1].file_id, caption=caption)
        elif msg.text:
            text = f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –Ω–æ–º–µ—Ä—É {number} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.from_user.id}:\n{msg.text}"
            await bot.send_message(drop_id, text)
        else:
            await msg.reply("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ.")
            return
        await msg.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—Ä–æ–ø—É.")
    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –î–†–û–ü–£] {e}")
        await msg.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä–æ–ø—É.")


@dp.callback_query_handler(lambda c: c.data == "leave_queue")
async def leave_queue(call: types.CallbackQuery):
    if call.message.chat.id not in GROUP2_IDS:
        return

    async with user_queue_lock:
        removed = False
        new_queue = []
        for u in user_queue:
            if u['user_id'] == call.from_user.id:
                removed = True
            else:
                new_queue.append(u)

        if removed:
            user_queue.clear()
            user_queue.extend(new_queue)

    if removed:
        try:
            await call.message.edit_text("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
        except Exception:
            await call.message.reply("üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –æ—á–µ—Ä–µ–¥—å.")
        logger.info(f"[–í–´–•–û–î –ò–ó –û–ß–ï–†–ï–î–ò] user_id={call.from_user.id}")
    else:
        await call.answer("–í—ã –Ω–µ –±—ã–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)

    save_data()
    await update_queue_messages()
