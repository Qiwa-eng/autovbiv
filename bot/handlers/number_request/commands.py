import os
from datetime import datetime
from html import escape

from aiogram import types

from ..config import dp, bot, GROUP1_ID, GROUP2_IDS, TOPIC_IDS_GROUP1, logger
from ..queue import (
    number_queue,
    user_queue,
    bindings,
    IGNORED_TOPICS,
    number_queue_lock,
    user_queue_lock,
)
from ..storage import save_data, QUEUE_FILE
from ..utils import phone_pattern


@dp.message_handler(commands=["work"])
async def remove_topic_from_ignore(msg: types.Message):
    if msg.message_thread_id is not None:
        if msg.message_thread_id in IGNORED_TOPICS:
            IGNORED_TOPICS.remove(msg.message_thread_id)
            await msg.reply(
                "‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–º–µ—Ä–∞."
            )
            save_data()
        else:
            await msg.reply("‚ÑπÔ∏è –≠—Ç–∞ —Ç–µ–º–∞ –∏ —Ç–∞–∫ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ.")


@dp.message_handler(commands=["—É–¥–∞–ª–∏—Ç—å", "delete"])
async def remove_number_from_queue(msg: types.Message):
    if msg.chat.id not in {GROUP1_ID, *GROUP2_IDS}:
        return

    target_id = None
    number_text = None

    if msg.reply_to_message:
        target_id = msg.reply_to_message.message_id
        match = phone_pattern.search(msg.reply_to_message.text or "")
        if match:
            number_text = match.group(0)

    if not number_text:
        match = phone_pattern.search(msg.get_args())
        if match:
            number_text = match.group(0)

    removed = False
    async with number_queue_lock:
        for item in list(number_queue):
            if (
                (target_id and item.get("message_id") == target_id)
                or (number_text and number_text in item.get("text", ""))
            ):
                number_queue.remove(item)
                removed = True
                if not number_text:
                    match = phone_pattern.search(item.get("text", ""))
                    if match:
                        number_text = match.group(0)
                break

    if removed:
        save_data()
        await msg.reply(
            f"‚úÖ –ù–æ–º–µ—Ä <code>{escape(number_text)}</code> —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏.",
            parse_mode="HTML",
        )
        logger.info(f"[–£–î–ê–õ–ï–ù–ò–ï] {number_text} ‚Üí user_id={msg.from_user.id}")
    else:
        await msg.reply("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏.")


@dp.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç—å"])
async def handle_clear_queue(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    async with number_queue_lock:
        number_queue.clear()
    async with user_queue_lock:
        user_queue.clear()
    bindings.clear()
    save_data()

    for topic_id in TOPIC_IDS_GROUP1:
        try:
            await bot.send_message(
                chat_id=GROUP1_ID,
                message_thread_id=topic_id,
                text="‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞",
            )
            logger.info(f"[–û–ß–ò–°–¢–ö–ê] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É {topic_id}")
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï] –¢–µ–º–∞ {topic_id}: {e}")

    await msg.reply("–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚úÖ")
    logger.info(f"[–û–ß–ò–°–¢–ö–ê] –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")


@dp.message_handler(commands=["–æ—á–µ—Ä–µ–¥—å"])
async def handle_queue_status(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    num_numbers = len(number_queue)
    num_users = len(user_queue)

    if num_users == 0:
        est_wait = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    elif num_numbers == 0:
        est_wait = "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞"
    else:
        seconds_total = num_users * 30
        minutes = seconds_total // 60
        seconds = seconds_total % 60
        est_wait = f"~{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    if os.path.exists(QUEUE_FILE):
        timestamp = os.path.getmtime(QUEUE_FILE)
        last_updated = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
    else:
        last_updated = "–Ω/–¥"

    text = (
        "üìä <b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å</b>\n\n"
        f"üî¢ <b>–ù–æ–º–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{num_numbers}</code>\n"
        f"üë• <b>–û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{num_users}</code>\n\n"
        f"‚è±Ô∏è <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <i>{est_wait}</i>\n"
        f"üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <i>{last_updated}</i>\n\n"
        "üí° <i>–ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –∫–æ–¥—ã ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–æ–º–µ—Ä–∞ üêé</i>"
    )

    await msg.reply(text)


@dp.message_handler(commands=["id"])
async def handle_id_command(msg: types.Message):
    chat_id = msg.chat.id
    thread_id = msg.message_thread_id

    text = f"<b>Chat ID:</b> <code>{chat_id}</code>"
    if thread_id is not None:
        text += f"\n<b>Topic (Thread) ID:</b> <code>{thread_id}</code>"

    await msg.reply(text)


@dp.message_handler(commands=["nework"])
async def add_topic_to_ignore(msg: types.Message):
    if msg.message_thread_id is not None:
        IGNORED_TOPICS.add(msg.message_thread_id)
        save_data()
        await msg.reply(
            "‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–∫–ª—é—á–µ–Ω–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–¥–µ—Å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞."
        )
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")

