import os
from datetime import datetime
from statistics import mean
from html import escape

from aiogram import types

from ...config import dp, bot, GROUP1_ID, GROUP2_IDS, TOPIC_IDS_GROUP1, logger
from ...queue import (
    number_queue,
    user_queue,
    bindings,
    blocked_numbers,
    IGNORED_TOPICS,
    number_queue_lock,
    user_queue_lock,
)
from ... import queue as queue_state
from ...storage import save_data, history, issued_numbers
from ...utils import phone_pattern, get_number_action_keyboard
from .utils import update_queue_messages, try_dispatch_next


@dp.message_handler(lambda msg: msg.text and msg.text.lower() == "–Ω–æ–º–µ—Ä")
async def handle_number_request(msg: types.Message):
    logger.info(
        f"[–ó–ê–ü–†–û–° –ù–û–ú–ï–†–ê] user_id={msg.from_user.id} chat_id={msg.chat.id} topic={msg.message_thread_id}"
    )
    if not queue_state.WORKING:
        return await msg.reply("‚è∏Ô∏è –ë–æ—Ç —Å–µ–π—á–∞—Å –Ω–µ –≤—ã–¥–∞—ë—Ç –Ω–æ–º–µ—Ä–∞.")
    if msg.chat.type == "private":
        logger.debug(f"[–ó–ê–ü–†–û–° –ù–û–ú–ï–†–ê] user_id={msg.from_user.id} –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ")
        return await msg.reply(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ <b>–Ω–æ–º–µ—Ä</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML"
        )

    if msg.message_thread_id in IGNORED_TOPICS:
        logger.debug(
            f"[–ó–ê–ü–†–û–° –ù–û–ú–ï–†–ê] —Ç–µ–º–∞ {msg.message_thread_id} –≤ —Å–ø–∏—Å–∫–µ –∏–≥–Ω–æ—Ä–∞"
        )
        return await msg.reply(
            "‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /work."
        )

    if msg.chat.id not in GROUP2_IDS:
        logger.debug(f"[–ó–ê–ü–†–û–° –ù–û–ú–ï–†–ê] —á–∞—Ç {msg.chat.id} –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω")
        return

    async with user_queue_lock:
        for entry in user_queue:
            if entry['user_id'] == msg.from_user.id:
                logger.debug(
                    f"[–ó–ê–ü–†–û–° –ù–û–ú–ï–†–ê] user_id={msg.from_user.id} —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏"
                )
                return await msg.reply("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –Ω–æ–º–µ—Ä.")

    async with number_queue_lock:
        if number_queue:
            number = number_queue.popleft()
        else:
            number = None

    if number:
        message_text = (
            f"üéâ <b>–í–∞—à –Ω–æ–º–µ—Ä:</b> <code>{escape(number['text'])}</code>\n\n"
            "‚úâÔ∏è <i>–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥.</i>\n"
            "‚ö†Ô∏è <b>–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞</b>, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ <u>—Å–∫—Ä–∏–Ω</u>."
        )

        sent = await bot.send_message(
            chat_id=msg.chat.id,
            text=message_text,
            reply_to_message_id=msg.message_id,
            reply_markup=get_number_action_keyboard(),
            parse_mode="HTML",
        )

        bindings[str(sent.message_id)] = {
            "orig_msg_id": number['message_id'],
            "topic_id": number['topic_id'],
            "group_id": number['from_group_id'],
            "user_id": msg.from_user.id,
            "drop_id": number.get("drop_id"),
            "text": number['text'],
            "added_at": number.get("added_at"),
        }
        issued_numbers.append(number["text"])
        save_data()
        logger.info(f"[–í–´–î–ê–ù –ù–û–ú–ï–†] {number['text']} ‚Üí user_id={msg.from_user.id}")
    else:
        async with user_queue_lock:
            position = len(user_queue) + 1
        logger.info(f"[–û–ß–ï–†–ï–î–¨] user_id={msg.from_user.id} –ø–æ–∑–∏—Ü–∏—è {position}")
        notify = await msg.reply(
            f"‚è≥ <b>–°–≤–æ–±–æ–¥–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç.</b>\n–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{position}</b>",
            parse_mode="HTML",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="leave_queue")
            ),
        )

        async with user_queue_lock:
            user_queue.append(
                {
                    "user_id": msg.from_user.id,
                    "chat_id": msg.chat.id,
                    "request_msg_id": msg.message_id,
                    "timestamp": datetime.utcnow().isoformat(),
                    "notify_msg_id": notify.message_id,
                }
            )
            queue_len = len(user_queue)
            logger.debug(f"[–û–ß–ï–†–ï–î–¨] —Ä–∞–∑–º–µ—Ä: {queue_len}")
            if queue_len > 10:
                logger.critical(f"[–û–ß–ï–†–ï–î–¨] —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö: {queue_len}")

        save_data()
        await try_dispatch_next()
        await update_queue_messages()


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_number_sources(msg: types.Message):
    if not queue_state.WORKING:
        return
    if msg.message_thread_id in IGNORED_TOPICS:
        return
    if msg.chat.type == "private":
        return

    if msg.chat.id == GROUP1_ID and msg.message_thread_id in TOPIC_IDS_GROUP1:
        match = phone_pattern.search(msg.text)
        if not match:
            return

        number_text = match.group(0)

        blocked_until = blocked_numbers.get(number_text)
        now_ts = datetime.utcnow().timestamp()
        if blocked_until:
            if blocked_until > now_ts:
                await bot.send_message(
                    chat_id=msg.chat.id,
                    message_thread_id=msg.message_thread_id,
                    reply_to_message_id=msg.message_id,
                    text="‚õî –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                )
                logger.info(f"[–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ô –ù–û–ú–ï–†] {number_text}")
                return
            else:
                blocked_numbers.pop(number_text, None)

        async with number_queue_lock:
            duplicate_in_queue = any(
                number_text in item.get("text", "") for item in number_queue
            )
            duplicate_in_bindings = any(
                number_text in item.get("text", "") for item in bindings.values()
            )
            duplicate = duplicate_in_queue or duplicate_in_bindings
            if not duplicate:
                number_queue.append(
                    {
                        "message_id": msg.message_id,
                        "topic_id": msg.message_thread_id,
                        "text": msg.text,
                        "from_group_id": msg.chat.id,
                        "drop_id": msg.from_user.id,
                        "added_at": datetime.utcnow().timestamp(),
                    }
                )
        if duplicate:
            await bot.send_message(
                chat_id=msg.chat.id,
                message_thread_id=msg.message_thread_id,
                reply_to_message_id=msg.message_id,
                text="‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –≤—ã–¥–∞–Ω",
            )
            logger.info(f"[–î–£–ë–õ–ò–ö–ê–¢] {number_text}")
            return

        save_data()

        if history:
            avg_delay = int(
                mean(entry["delay"] for entry in history if "delay" in entry)
            )
            avg_delay = max(5, min(avg_delay, 1800))
            minutes = avg_delay // 60
            seconds = avg_delay % 60
            estimate = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        else:
            estimate = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        await bot.send_message(
            chat_id=msg.chat.id,
            message_thread_id=msg.message_thread_id,
            reply_to_message_id=msg.message_id,
            text=f"‚úÖ –í–∑—è–ª –Ω–æ–º–µ—Ä\n\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞: <b>{escape(estimate)}</b>",
            parse_mode="HTML",
        )

        logger.info(
            f"[–ù–û–ú–ï–† –ü–†–ò–ù–Ø–¢] {number_text} –∏–∑ —Ç–µ–º—ã {msg.message_thread_id}"
        )
        await try_dispatch_next()

