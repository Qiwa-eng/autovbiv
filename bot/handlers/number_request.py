import asyncio
import os
from datetime import datetime, timedelta
from statistics import mean

from aiogram import types

from ..config import dp, bot, GROUP1_ID, GROUP2_IDS, TOPIC_IDS_GROUP1, logger
from ..queue import number_queue, user_queue, bindings, blocked_numbers, IGNORED_TOPICS
from ..storage import save_data, load_data, load_history, save_history, history, QUEUE_FILE
from ..utils import phone_pattern, get_number_action_keyboard, fetch_russian_joke


@dp.message_handler(lambda msg: msg.text and msg.text.lower() == "–Ω–æ–º–µ—Ä")
async def handle_number_request(msg: types.Message):
    if msg.chat.type == "private":
        return await msg.reply(
            "‚ùå –ö–æ–º–∞–Ω–¥–∞ <b>–Ω–æ–º–µ—Ä</b> —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.", parse_mode="HTML"
        )

    if msg.message_thread_id in IGNORED_TOPICS:
        return await msg.reply(
            "‚ö†Ô∏è –í —ç—Ç–æ–π —Ç–µ–º–µ –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /work."
        )

    if msg.chat.id not in GROUP2_IDS:
        return

    for entry in user_queue:
        if entry['user_id'] == msg.from_user.id:
            return await msg.reply("‚ö†Ô∏è –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –Ω–æ–º–µ—Ä.")

    if number_queue:
        number = number_queue.popleft()

        message_text = (
            f"<b>–í–∞—à –Ω–æ–º–µ—Ä:</b> {number['text']}\n"
            f"<code>–ù–∞–∂–º–∏—Ç–µ \"–û—Ç–≤–µ—Ç–∏—Ç—å\" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –Ω–æ–º–µ—Ä–∞</code>\n\n"
            f"‚ùóÔ∏è <b>–ï—Å–ª–∏ –≤—ã–±–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É</b> ‚Äî —Å—Ä–∞–∑—É –∫–∏–¥–∞–π—Ç–µ <u>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏</u> —Ç–∞–∫ –∂–µ –æ—Ç–≤–µ—Ç–æ–º.\n"
            f"–ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ –≤–∞—Å –±—É–¥—É—Ç –¥—Ä–æ—á–∏—Ç—å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∫–∞–º–∏."
        )

        sent = await bot.send_message(
            chat_id=msg.chat.id,
            text=message_text,
            reply_to_message_id=msg.message_id,
            reply_markup=get_number_action_keyboard(),
        )

        bindings[str(sent.message_id)] = {
            "orig_msg_id": number['message_id'],
            "topic_id": number['topic_id'],
            "group_id": number['from_group_id'],
            "user_id": msg.from_user.id,
            "text": number['text'],
            "added_at": number.get("added_at"),
        }

        save_data()
        logger.info(f"[–í–´–î–ê–ù –ù–û–ú–ï–†] {number['text']} ‚Üí user_id={msg.from_user.id}")
    else:
        position = len(user_queue) + 1

        notify = await msg.reply(
            f"‚è≥ –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({position})",
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="leave_queue")
            ),
        )

        user_queue.append(
            {
                "user_id": msg.from_user.id,
                "chat_id": msg.chat.id,
                "request_msg_id": msg.message_id,
                "timestamp": datetime.utcnow().isoformat(),
                "notify_msg_id": notify.message_id,
            }
        )

        save_data()
        await try_dispatch_next()
        await update_queue_messages()


@dp.callback_query_handler(lambda c: c.data == "error_reason")
async def error_reason_menu(call: types.CallbackQuery):
    keyboard = types.InlineKeyboardMarkup().add(
        types.InlineKeyboardButton("‚ùå –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞", callback_data="error_ban"),
        types.InlineKeyboardButton("‚åõ –ù–µ –≤–≤–µ–ª–∏ –∫–æ–¥", callback_data="error_noban"),
    )
    await call.message.edit_reply_markup(reply_markup=keyboard)


async def update_queue_messages():
    for idx, user in enumerate(sorted(user_queue, key=lambda x: x["timestamp"])):
        try:
            position = idx + 1
            await bot.edit_message_text(
                chat_id=user["chat_id"],
                message_id=user["notify_msg_id"],
                text=f"‚è≥ –ù–æ–º–µ—Ä–æ–≤ –Ω–µ—Ç, –≤—ã –≤ –æ—á–µ—Ä–µ–¥–∏ ({position})",
                reply_markup=types.InlineKeyboardMarkup().add(
                    types.InlineKeyboardButton(
                        "–í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="leave_queue"
                    )
                ),
            )
        except Exception as e:
            logger.warning(
                f"[–û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –û–ß–ï–†–ï–î–ò] user_id={user['user_id']}: {e}"
            )


@dp.message_handler(commands=["work"])
async def remove_topic_from_ignore(msg: types.Message):
    if msg.is_topic_message:
        if msg.message_thread_id in IGNORED_TOPICS:
            IGNORED_TOPICS.remove(msg.message_thread_id)
            await msg.reply(
                "‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ë–æ—Ç —Ç–µ–ø–µ—Ä—å —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –Ω–æ–º–µ—Ä–∞."
            )
        else:
            await msg.reply("‚ÑπÔ∏è –≠—Ç–∞ —Ç–µ–º–∞ –∏ —Ç–∞–∫ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞.")
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ.")


@dp.message_handler(commands=["–æ—á–∏—Å—Ç–∏—Ç—å"])
async def handle_clear_queue(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    number_queue.clear()
    user_queue.clear()
    bindings.clear()
    save_data()

    for topic_id in TOPIC_IDS_GROUP1:
        try:
            await bot.send_message(
                chat_id=GROUP1_ID,
                message_thread_id=topic_id,
                text="‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π—Ç–µ –Ω–æ–º–µ—Ä–∞",
            )
            logger.info(f"[–û–ß–ò–°–¢–ö–ê] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–µ–º—É {topic_id}")
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –ü–†–ò –û–ß–ò–°–¢–ö–ï] –¢–µ–º–∞ {topic_id}: {e}")

    await msg.reply("–û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞ ‚úÖ")
    logger.info(f"[–û–ß–ò–°–¢–ö–ê] –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {msg.from_user.id}")


@dp.message_handler(commands=["–æ—á–µ—Ä–µ–¥—å"])
async def handle_queue_status(msg: types.Message):
    if msg.chat.id not in GROUP2_IDS:
        return

    num_numbers = len(number_queue)
    num_users = len(user_queue)

    if num_users == 0:
        est_wait = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–æ"
    elif num_numbers == 0:
        est_wait = "–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–º–µ—Ä–∞"
    else:
        seconds_total = num_users * 30
        minutes = seconds_total // 60
        seconds = seconds_total % 60
        est_wait = f"~{minutes} –º–∏–Ω {seconds} —Å–µ–∫"

    if os.path.exists(QUEUE_FILE):
        timestamp = os.path.getmtime(QUEUE_FILE)
        last_updated = datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")
    else:
        last_updated = "–Ω/–¥"

    text = (
        "üìä <b>–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å</b>\n\n"
        f"üî¢ <b>–ù–æ–º–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{num_numbers}</code>\n"
        f"üë• <b>–û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{num_users}</code>\n\n"
        f"‚è±Ô∏è <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <i>{est_wait}</i>\n"
        f"üïí <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> <i>{last_updated}</i>\n\n"
        "üí° <i>–ß–µ–º –±—ã—Å—Ç—Ä–µ–µ –∫–æ–¥—ã ‚Äî —Ç–µ–º –±—ã—Å—Ç—Ä–µ–µ –Ω–æ–º–µ—Ä–∞ üêé</i>"
    )

    await msg.reply(text)


@dp.callback_query_handler(lambda c: c.data == "skip_number")
async def handle_skip_number(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    number_queue.append(
        {
            "message_id": binding["orig_msg_id"],
            "topic_id": binding["topic_id"],
            "text": number_text,
            "from_group_id": binding["group_id"],
            "added_at": binding.get("added_at", datetime.utcnow().timestamp()),
        }
    )

    try:
        await call.message.edit_text("üîÅ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")
    except Exception:
        await call.message.reply("üîÅ –ù–æ–º–µ—Ä –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –æ—á–µ—Ä–µ–¥—å.")

    logger.info(f"[–°–ö–ò–ü] {number_text} ‚Üí user_id={user_id}")

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()


@dp.callback_query_handler(lambda c: c.data in ["error_ban", "error_noban"])
async def handle_error_choice(call: types.CallbackQuery):
    msg_id = call.message.message_id
    user_id = call.from_user.id
    binding = bindings.get(str(msg_id))

    if not binding:
        return await call.answer("–ù–æ–º–µ—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)

    number_text = binding["text"]

    if call.data == "error_ban":
        blocked_until = datetime.utcnow() + timedelta(minutes=30)
        blocked_numbers[number_text] = blocked_until.timestamp()
        await call.message.edit_text(
            "‚ùå –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚õî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –º–∏–Ω—É—Ç (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞)."
        )
        reason = "–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞"
        logger.info(f"[–û–®–ò–ë–ö–ê –° –ë–ê–ù–û–ú] {number_text} ‚Üí user_id={user_id}")
    else:
        await call.message.edit_text(
            "‚ùå –ù–æ–º–µ—Ä —É–¥–∞–ª—ë–Ω.\n‚åõ –ë–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ–¥)."
        )
        reason = "–Ω–µ –ø—Ä–∏—à—ë–ª –∫–æ–¥"
        logger.info(f"[–û–®–ò–ë–ö–ê –ë–ï–ó –ë–ê–ù–ê] {number_text} ‚Üí user_id={user_id}")

    try:
        await bot.send_message(
            chat_id=binding["group_id"],
            message_thread_id=binding["topic_id"],
            reply_to_message_id=binding["orig_msg_id"],
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ—à–∏–±–∫–µ: {reason}",
        )
    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–ü–û–í–ï–©–ï–ù–ò–Ø –û–®–ò–ë–ö–ò] {e}")

    bindings.pop(str(msg_id), None)
    save_data()
    await try_dispatch_next()


@dp.message_handler(commands=["id"])
async def handle_id_command(msg: types.Message):
    chat_id = msg.chat.id
    thread_id = msg.message_thread_id

    text = f"<b>Chat ID:</b> <code>{chat_id}</code>"
    if thread_id is not None:
        text += f"\n<b>Topic (Thread) ID:</b> <code>{thread_id}</code>"

    await msg.reply(text)


@dp.message_handler(commands=["nework"])
async def add_topic_to_ignore(msg: types.Message):
    if msg.is_topic_message:
        IGNORED_TOPICS.add(msg.message_thread_id)
        await msg.reply(
            "‚úÖ –≠—Ç–∞ —Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–∫–ª—é—á–µ–Ω–∞. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–¥–µ—Å —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–º–µ—Ä–∞."
        )
    else:
        await msg.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã.")


@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def handle_number_sources(msg: types.Message):
    if msg.message_thread_id in IGNORED_TOPICS:
        return
    if msg.chat.type == "private":
        return

    if msg.chat.id == GROUP1_ID and msg.message_thread_id in TOPIC_IDS_GROUP1:
        match = phone_pattern.search(msg.text)
        if not match:
            return

        number_text = match.group(0)

        blocked_until = blocked_numbers.get(number_text)
        now_ts = datetime.utcnow().timestamp()
        if blocked_until:
            if blocked_until > now_ts:
                await bot.send_message(
                    chat_id=msg.chat.id,
                    message_thread_id=msg.message_thread_id,
                    reply_to_message_id=msg.message_id,
                    text="‚õî –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
                )
                logger.info(f"[–ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–ù–´–ô –ù–û–ú–ï–†] {number_text}")
                return
            else:
                blocked_numbers.pop(number_text, None)

        for item in number_queue:
            if number_text in item.get("text", ""):
                await bot.send_message(
                    chat_id=msg.chat.id,
                    message_thread_id=msg.message_thread_id,
                    reply_to_message_id=msg.message_id,
                    text="‚ö†Ô∏è –¢–∞–∫–æ–π –Ω–æ–º–µ—Ä —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏",
                )
                logger.info(f"[–î–£–ë–õ–ò–ö–ê–¢ –í –û–ß–ï–†–ï–î–ò] {number_text}")
                return

        number_queue.append(
            {
                "message_id": msg.message_id,
                "topic_id": msg.message_thread_id,
                "text": msg.text,
                "from_group_id": msg.chat.id,
                "added_at": datetime.utcnow().timestamp(),
            }
        )
        save_data()

        if history:
            avg_delay = int(
                mean(entry["delay"] for entry in history if "delay" in entry)
            )
            avg_delay = max(5, min(avg_delay, 1800))
            minutes = avg_delay // 60
            seconds = avg_delay % 60
            estimate = f"{minutes} –º–∏–Ω {seconds} —Å–µ–∫"
        else:
            estimate = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"

        await bot.send_message(
            chat_id=msg.chat.id,
            message_thread_id=msg.message_thread_id,
            reply_to_message_id=msg.message_id,
            text=f"‚úÖ –í–∑—è–ª –Ω–æ–º–µ—Ä\n\n‚è± –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–¥–∞: <b>{estimate}</b>",
            parse_mode="HTML",
        )

        logger.info(
            f"[–ù–û–ú–ï–† –ü–†–ò–ù–Ø–¢] {number_text} –∏–∑ —Ç–µ–º—ã {msg.message_thread_id}"
        )
        await try_dispatch_next()


@dp.callback_query_handler(lambda c: c.data == "leave_queue")
async def leave_queue(call: types.CallbackQuery):
    if call.message.chat.id not in GROUP2_IDS:
        return

    removed = False
    new_queue = []
    for u in user_queue:
        if u['user_id'] == call.from_user.id:
            removed = True
        else:
            new_queue.append(u)

    if removed:
        user_queue.clear()
        user_queue.extend(new_queue)
        try:
            await call.message.edit_text("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        except Exception:
            await call.message.reply("‚ùå –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.")
        logger.info(f"[–í–´–•–û–î –ò–ó –û–ß–ï–†–ï–î–ò] user_id={call.from_user.id}")
    else:
        await call.answer("–í—ã –Ω–µ –±—ã–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏.", show_alert=True)

    save_data()
    await update_queue_messages()


@dp.message_handler(content_types=types.ContentTypes.PHOTO)
async def handle_photo_response(msg: types.Message):
    if not msg.reply_to_message:
        return

    binding = bindings.get(str(msg.reply_to_message.message_id))
    if not binding:
        return

    try:
        await bot.send_photo(
            chat_id=binding['group_id'],
            photo=msg.photo[-1].file_id,
            message_thread_id=binding['topic_id'],
            reply_to_message_id=binding['orig_msg_id'],
        )

        await msg.reply("‚úÖ –ö–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        added_at = binding.get("added_at")
        if added_at:
            now = datetime.utcnow().timestamp()
            delay = now - added_at
            history.append({"added": added_at, "responded": now, "delay": delay})
            history[:] = history[-50:]
            save_history()
            logger.info(
                f"[–ö–û–î –ü–û–õ–£–ß–ï–ù] user_id={binding['user_id']} ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ {int(delay)} —Å–µ–∫"
            )

    except Exception as e:
        logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò –ö–û–î–ê] {e}")
        await msg.reply(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä ‚Äî –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —á–∞—Ç–µ —Å –Ω–æ–º–µ—Ä–∞–º–∏.",
        )
    finally:
        bindings.pop(str(msg.reply_to_message.message_id), None)
        save_data()


async def joke_dispatcher():
    sent_users = set()
    while True:
        now = datetime.utcnow().timestamp()
        for user in list(user_queue):
            ts = datetime.fromisoformat(user["timestamp"]).timestamp()
            if now - ts >= 60 and user['user_id'] not in sent_users:
                joke = fetch_russian_joke()
                try:
                    await bot.send_message(
                        chat_id=user["chat_id"],
                        text=f"üïì –ü–æ–∫–∞ –≤—ã –∂–¥—ë—Ç–µ, –≤–æ—Ç –≤–∞–º –∞–Ω–µ–∫–¥–æ—Ç:\n\n<code>{joke}</code>",
                        parse_mode="HTML",
                        reply_to_message_id=user.get("request_msg_id"),
                    )
                    sent_users.add(user['user_id'])
                except Exception as e:
                    logger.warning(f"[–ê–ù–ï–ö–î–û–¢] user_id={user['user_id']}: {e}")
        await asyncio.sleep(30)


async def try_dispatch_next():
    if not number_queue and user_queue:
        now = datetime.utcnow().timestamp()
        if not hasattr(try_dispatch_next, "last_notice") or now - try_dispatch_next.last_notice > 120:
            try_dispatch_next.last_notice = now
            for topic_id in TOPIC_IDS_GROUP1:
                try:
                    await bot.send_message(
                        chat_id=GROUP1_ID,
                        message_thread_id=topic_id,
                        text="üö® –û—á–µ—Ä–µ–¥—å –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç–∞! –°–∞–º—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–¥—ã –Ω–∞ –¥–∏–∫–æ–º –∑–∞–ø–∞–¥–µ!",
                    )
                    logger.info(f"[–û–ü–û–í–ï–©–ï–ù–ò–ï] –ü—É—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å ‚Üí —Ç–µ–º–∞ {topic_id}")
                except Exception as e:
                    logger.warning(f"[–û–®–ò–ë–ö–ê –û–ü–û–í–ï–©–ï–ù–ò–Ø] —Ç–µ–º–∞ {topic_id}: {e}")
        return

    while number_queue and user_queue:
        number = number_queue.popleft()
        sorted_users = sorted(user_queue, key=lambda u: datetime.fromisoformat(u['timestamp']))
        user = sorted_users[0]
        user_queue.remove(user)

        await update_queue_messages()

        message_text = (
            f"<b>–í–∞—à –Ω–æ–º–µ—Ä:</b> {number['text']}\n"
            f"<code>–ù–∞–∂–º–∏—Ç–µ \"–û—Ç–≤–µ—Ç–∏—Ç—å\" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ç –Ω–æ–º–µ—Ä–∞</code>\n\n"
            f"‚ùóÔ∏è <b>–ï—Å–ª–∏ –≤—ã–±–∏–≤–∞–µ—Ç –æ—à–∏–±–∫—É</b> ‚Äî —Å—Ä–∞–∑—É –∫–∏–¥–∞–π—Ç–µ <u>—Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏</u> —Ç–∞–∫ –∂–µ –æ—Ç–≤–µ—Ç–æ–º.\n"
            f"–ë–µ–∑ —Å–∫—Ä–∏–Ω–∞ –≤–∞—Å –±—É–¥—É—Ç –¥—Ä–æ—á–∏—Ç—å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º –∏ –∑–∞–∫–∏–¥—ã–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–∫–∞–º–∏."
        )
        try:
            sent = await bot.send_message(
                chat_id=user['chat_id'],
                text=message_text,
                reply_to_message_id=user['request_msg_id'],
                reply_markup=get_number_action_keyboard(),
            )
        except Exception as e:
            logger.warning(f"[–û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò] user_id={user['user_id']}: {e}")
            user_queue.appendleft(user)
            await update_queue_messages()
            continue

        bindings[str(sent.message_id)] = {
            "orig_msg_id": number['message_id'],
            "topic_id": number['topic_id'],
            "group_id": number['from_group_id'],
            "user_id": user['user_id'],
            "text": number['text'],
            "added_at": number.get("added_at"),
        }

        save_data()
        logger.info(
            f"[–ê–í–¢–û–í–´–î–ê–ß–ê] {number['text']} ‚Üí user_id={user['user_id']}"
        )
